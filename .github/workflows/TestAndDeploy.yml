name: Checking all test

on:
  pull_request:
    branches: [ "master"]

jobs: 
  build:
    strategy:
      matrix:
        configuration: [ "Debug", "Release" ]

    runs-on: ubuntu-latest

    env:
      Solution_Name: Dotnet_Base_Backend.sln
      Test_Project: Dotnet_Base_Backend.API.Tests.csproj
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      SONAR_PROJECT_KEY: ${{ secrets.SONAR_PROJECT_KEY }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Install .NET 
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 8.0.x

      - name: Execute unit test
        run: dotnet test

      - name: install dotnet-coverage
        run: dotnet tool install --global dotnet-coverage

      - name: Cache SonarQube Cloud packages
        uses: actions/cache@v4
        with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache SonarQube Cloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v4
        with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner

      - name: Install SonarQube Cloud scanner
        run: dotnet tool install --global dotnet-sonarscanner

      - name: SonarCube - SonaCloud -> Begin
        run: dotnet sonarscanner begin /k:"${{ secrets.SONAR_PROJECT_KEY }}" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /d:sonar.cs.vscoveragexml.reportsPaths=coverage.xml /d:sonar.host.url="https://sonarcloud.io" /d:sonar.organization="luigimonsoft"
        
      - name: Build and Test
        run: dotnet build --no-incremental

      - name: Collect coverage
        run: dotnet-coverage collect "dotnet test" -f xml -o "coverage.xml"
             
      - name: SonarCube - SonaCloud -> End
        run: dotnet sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"
